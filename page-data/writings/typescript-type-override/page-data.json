{"componentChunkName":"component---src-templates-blog-post-js","path":"/writings/typescript-type-override/","result":{"data":{"site":{"siteMetadata":{"title":"KWGUO Blog"}},"markdownRemark":{"id":"ee746478-89cb-5894-ba3b-ecb38aac69b8","excerpt":"這個問題是我在開發 nodejs 的時候，我想要 override  的 ，來讓他支援 type 所遇到的問題。 首先我有一個 handler 接受一個 type ，用來申明 context 的 type。 現在假設我有兩個 middleware ，一個會寫入 config ，一個會解析 body，並且 handler…","html":"<p>這個問題是我在開發 nodejs 的時候，我想要 override <code class=\"language-text\">koa</code> 的 <code class=\"language-text\">request.body</code>，來讓他支援 type 所遇到的問題。</p>\n<p>首先我有一個 handler 接受一個 type ，用來申明 context 的 type。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Handler<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  handle<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>現在假設我有兩個 middleware ，一個會寫入 config ，一個會解析 body，並且 handler 同時使用兩個 context</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ConfigContext</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">.</span>Context <span class=\"token punctuation\">{</span>\n  config<span class=\"token operator\">:</span> Config\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyRequest<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">.</span>Request <span class=\"token punctuation\">{</span>\n  body<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">BodyContext<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">.</span>Context <span class=\"token punctuation\">{</span>\n  request<span class=\"token operator\">:</span> MyRequest<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The problem is because we union the ConfigContext and BodyContext</span>\n<span class=\"token comment\">// but the body in ConfigContext is `any`, it conflict with the body in BodyContext</span>\n<span class=\"token keyword\">const</span> handler<span class=\"token operator\">:</span> Handler<span class=\"token operator\">&lt;</span>ConfigContext <span class=\"token operator\">&amp;</span> BodyContext<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ctx.request.body is any</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我發現到在這個時候 <code class=\"language-text\">body</code> 的 type 是 <code class=\"language-text\">any</code>，而不是我期望的 <code class=\"language-text\">{ username: string }</code>，這個問題在 <a href=\"https://github.com/microsoft/TypeScript/issues/2871\">issue</a> 中有被提過，雖然 issue 中說的是 <code class=\"language-text\">interface</code>，但我相信 union type 應該也是同樣的原因，如果不是請告訴我 :|</p>\n<p>由於 typescript 會不能了解他應該要拿哪一個 type 才好，所以就會變成 <code class=\"language-text\">any</code>，要解決這個問題，就需要明確的指定我們要使用哪一個 type。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Context</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConfigContext</span> <span class=\"token punctuation\">{</span>\n  request<span class=\"token operator\">:</span> MyRequest<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> handler<span class=\"token operator\">:</span> Handler<span class=\"token operator\">&lt;</span>Context<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span> <span class=\"token comment\">// now we can enjoy the type :)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Typescript type override","tags":["writing","typescript","ts","union type"],"date":"June 26, 2020","description":"A problem when I try to override the default type definition"}}},"pageContext":{"slug":"/typescript-type-override/","previous":{"fields":{"slug":"/flutter-intrinsicheight/"},"frontmatter":{"title":"flutter IntrinsicHeight","tags":["writing","flutter","dynamic height"]}},"next":{"fields":{"slug":"/webpack-defineplugin/"},"frontmatter":{"title":"webpack DefinePlugin","tags":["writing","webpack","env","environment"]}}}},"staticQueryHashes":["4111554205","63159454"]}