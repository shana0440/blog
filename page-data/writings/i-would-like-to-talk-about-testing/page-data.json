{"componentChunkName":"component---src-templates-blog-post-js","path":"/writings/i-would-like-to-talk-about-testing/","result":{"data":{"site":{"siteMetadata":{"title":"KWGUO Blog"}},"markdownRemark":{"id":"2f4c516d-8043-525b-a6b2-61648fdec040","excerpt":"Hi, today I would like to take about testing. The story begins with a PR send by my colleague, and there have some problems I would like to talk about. The…","html":"<p>Hi, today I would like to take about testing.</p>\n<p>The story begins with a PR send by my colleague, and there have some problems I would like to talk about.</p>\n<p>The following code is the example.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> SettingRepo <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">setAccessToken</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The test objective</span>\n<span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> <span class=\"token function\">AuthController</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> settingRepo<span class=\"token operator\">:</span> SettingRepo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> authLibraryApp<span class=\"token operator\">:</span> AuthLibraryApp\n\n  <span class=\"token keyword\">init</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The thrid party library that we used</span>\n    AuthLibrary<span class=\"token punctuation\">.</span><span class=\"token function\">create</span> <span class=\"token punctuation\">{</span>\n      authLibraryApp <span class=\"token operator\">=</span> it\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>completion<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Result<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Exception<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    authLibraryApp<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> AuthLibraryLoginCallback <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        settingRepo<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessToken</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>Result<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> AuthLibraryError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> exception <span class=\"token operator\">=</span> <span class=\"token function\">parseAuthLibraryError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>Result<span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">isUserDisabled</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> user <span class=\"token operator\">=</span> <span class=\"token function\">fetchUserFromAuthLibrary</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>state <span class=\"token operator\">==</span> UserState<span class=\"token punctuation\">.</span>Disabled\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">fetchUserFromAuthLibrary</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> User <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> authLibraryApp<span class=\"token punctuation\">.</span><span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Test case</span>\n<span class=\"token keyword\">class</span> MockAuthController <span class=\"token operator\">:</span> AuthController <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">init</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> fakeUser<span class=\"token operator\">:</span> User\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">fetchUserFromAuthLibrary</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> fakeUser\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> AuthControllerTests <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation builtin\">@Test</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">testIsUserDisabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> authController <span class=\"token operator\">=</span> <span class=\"token function\">MockAuthController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    authController<span class=\"token punctuation\">.</span>fakeUser <span class=\"token operator\">=</span> <span class=\"token function\">FakeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> authController<span class=\"token punctuation\">.</span><span class=\"token function\">isUserDisabled</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"fake_access_token\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, let me talk about my opinion of the above code.</p>\n<p>First, we shouldn’t let creation and business logic in the same class, it makes the code hard to test, we can’t even write the test case about the login, because login depends on third party library, and it creates by <code class=\"language-text\">AuthController</code>, we have no way to mock it.</p>\n<p>Second, the <code class=\"language-text\">fetchUserFromAuthLibrary</code> is redundant, we can totally remove the <code class=\"language-text\">fetchUserFromAuthLibrary</code>, just make <code class=\"language-text\">isUserDisabled</code> call the <code class=\"language-text\">authLibraryApp.fetchUser</code>, the only reason we create <code class=\"language-text\">fetchUserFromAuthLibrary</code> is to let us override it to test the <code class=\"language-text\">isUserDisabled</code>.</p>\n<p>Third, just my two cents, testing a mocked test objective is cheating yourself, any implementation of test object shouldn’t change, on the above example, even we didn’t change the implementation of <code class=\"language-text\">isUserDisabled</code>, but the <code class=\"language-text\">fetchUserFromAuthLibrary</code> is part of <code class=\"language-text\">isUserDisabled</code>, so it shouldn’t change too.</p>\n<p>If it was me, the code will like the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> SettingRepo <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">setAccessToken</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">AuthService</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> settingRepo<span class=\"token operator\">:</span> SettingRepo<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> authApp<span class=\"token operator\">:</span> AuthLibraryApp\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>completion<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Result<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Exception<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    authApp<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> AuthLibraryLoginCallback <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        settingRepo<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessToken</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>Result<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> AuthLibraryError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> exception <span class=\"token operator\">=</span> <span class=\"token function\">parseAuthLibraryError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>Result<span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">isUserDisabled</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> user <span class=\"token operator\">=</span> authApp<span class=\"token punctuation\">.</span><span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>state <span class=\"token operator\">==</span> UserState<span class=\"token punctuation\">.</span>Disabled\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The test objective</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">AuthController</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> settingRepo<span class=\"token operator\">:</span> SettingRepo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> authService<span class=\"token operator\">:</span> AuthService\n\n  <span class=\"token keyword\">init</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The thrid party library that we used</span>\n    AuthLibrary<span class=\"token punctuation\">.</span><span class=\"token function\">create</span> <span class=\"token punctuation\">{</span>\n      authService <span class=\"token operator\">=</span> <span class=\"token function\">AuthService</span><span class=\"token punctuation\">(</span>settingRepo<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>completion<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Result<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Exception<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    authService<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">isUserDisabled</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">isUserDisabled</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Test case</span>\n<span class=\"token keyword\">class</span> MockSettingRepo <span class=\"token operator\">:</span> SettingRepo <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> calledSetAccessTokenCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">setAccessToken</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    calledSetAccessTokenCount<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> AuthServiceTests <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation builtin\">@Test</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">testIsUserDisabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> authApp <span class=\"token operator\">=</span> mockk<span class=\"token operator\">&lt;</span>AuthLibraryApp<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    every <span class=\"token punctuation\">{</span> authApp<span class=\"token punctuation\">.</span><span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> returns <span class=\"token function\">FakeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> authService <span class=\"token operator\">=</span> <span class=\"token function\">AuthService</span><span class=\"token punctuation\">(</span><span class=\"token function\">MockSettingRepo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> authApp<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">isUserDisabled</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"fake_access_token\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation builtin\">@Test</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">testLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> authApp <span class=\"token operator\">=</span> mockk<span class=\"token operator\">&lt;</span>AuthLibraryApp<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> slot <span class=\"token operator\">=</span> slot<span class=\"token operator\">&lt;</span>AuthLibraryLoginCallback<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    every <span class=\"token punctuation\">{</span> authApp<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token function\">capture</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> answers <span class=\"token punctuation\">{</span>\n      slot<span class=\"token punctuation\">.</span>captured<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"fake_access_token\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">val</span> settingRepo <span class=\"token operator\">=</span> <span class=\"token function\">MockSettingRepo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> authService <span class=\"token operator\">=</span> <span class=\"token function\">AuthService</span><span class=\"token punctuation\">(</span>settingRepo<span class=\"token punctuation\">,</span> authApp<span class=\"token punctuation\">)</span>\n\n    authService<span class=\"token punctuation\">.</span><span class=\"token function\">login</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">is</span> Result<span class=\"token punctuation\">.</span>success <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"fake_access_token\"</span></span><span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n          <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> settingRepo<span class=\"token punctuation\">.</span>calledSetAccessTokenCount<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">is</span> Result<span class=\"token punctuation\">.</span>failure <span class=\"token operator\">-></span> <span class=\"token function\">assertFail</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"should be success\"</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above code separate the creation and business logic, the service didn’t create anything, so it’s easy to test, we can mock anything we want.</p>","frontmatter":{"title":"I would like to talk about testing","tags":["writing","test","code quality"],"date":"August 07, 2021","description":"My personal opinion about testable code"}}},"pageContext":{"slug":"/i-would-like-to-talk-about-testing/","previous":{"fields":{"slug":"/django-deployment/"},"frontmatter":{"title":"Django Deployment","tags":["writing","python","django"]}},"next":{"fields":{"slug":"/import-private-key-to-ssh-agent/"},"frontmatter":{"title":"Import private key to ssh-agent","tags":["writing","ssh","linux","devops"]}}}},"staticQueryHashes":["4111554205","63159454"]}