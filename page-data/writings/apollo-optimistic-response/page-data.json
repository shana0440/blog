{"componentChunkName":"component---src-templates-blog-post-js","path":"/writings/apollo-optimistic-response/","result":{"data":{"site":{"siteMetadata":{"title":"KWGUO Blog"}},"markdownRemark":{"id":"07663139-e609-5417-ac43-616794a282ad","excerpt":"在使用 mutation 的時候，apollo client 提供一個叫做 optimistic response 的功能，讓我們能在得到 response 之前，先使用一個假的回應，來修改我們的 UI，提供使用者一個較好的 UX…","html":"<p>在使用 mutation 的時候，apollo client 提供一個叫做 optimistic response 的功能，讓我們能在得到 response 之前，先使用一個假的回應，來修改我們的 UI，提供使用者一個較好的 UX。</p>\n<p>舉例來說，我們可能想要在使用者按下刪除留言的時候，就立刻把留言刪除，而不是等 server response 之後才刪除，讓使用者有立即的回饋。</p>\n<h5>example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> DeleteCommentDocument <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  mutation DeleteComment($commentID: ID!) {\n    deleteComment(commentID: $commentID) {\n      id\n      deletedAt\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useDeleteComment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>mutate<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>DeleteCommentDocument<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> commentID<span class=\"token operator\">:</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        optimisticResponse<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          deleteComment<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            __typename<span class=\"token operator\">:</span> <span class=\"token string\">\"Comment\"</span><span class=\"token punctuation\">,</span>\n            id<span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span>\n            deletedAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>mutate<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是在有些情況下 optimistic response 不會有作用，就是在 fetch-policy 是 <code class=\"language-text\">network-only</code> or <code class=\"language-text\">no-cache</code> 的時候。</p>\n<p>原因是出在 optimistic response 是修改 local 的 cache，並且 mutation 會通知 query observer update result，接著 query observer 會透過 <a href=\"https://github.com/apollographql/apollo-client/blob/18b439e1b151f1e41385ff5cd3186a230cefee4c/src/core/QueryManager.ts#L1030\">fetchQueryByPolicy</a> 來根據目前的 <code class=\"language-text\">fetchPolicy</code> 決定傳什麼資料給 subscriber。</p>\n<p>從 source code 可以看到 <code class=\"language-text\">fetchQueryByPolicy</code> 會回傳 <code class=\"language-text\">[resultsFromCache]</code>, <code class=\"language-text\">[resultsFromCache, resultsFromLink]</code> or <code class=\"language-text\">[resultsFromLink]</code>，這些代表著 subscriber 會收到哪些資料，當 <code class=\"language-text\">fetchPolicy</code> 是 <code class=\"language-text\">network-only</code> or <code class=\"language-text\">no-cache</code> 的時候並不會收到來自 cache 的資料，因此就算設定了 optimistic response ，UI 也不會有改變。</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://github.com/apollographql/apollo-client\">https://github.com/apollographql/apollo-client</a></li>\n</ul>","frontmatter":{"title":"Apollo Optimistic Response","tags":["writing","graphql","apollo","react","mutation","ux"],"date":"May 29, 2021","description":"When optimistic response not works"}}},"pageContext":{"slug":"/apollo-optimistic-response/","previous":{"fields":{"slug":"/react-state-manage-for-typescript/"},"frontmatter":{"title":"React State Manage for Typescript","tags":["writing","react","state","typescript"]}},"next":{"fields":{"slug":"/django-deployment/"},"frontmatter":{"title":"Django Deployment","tags":["writing","python","django"]}}}},"staticQueryHashes":["4111554205","63159454"]}