{"componentChunkName":"component---src-templates-blog-post-js","path":"/writings/createobjecturl/","result":{"data":{"site":{"siteMetadata":{"title":"KWGUO Blog"}},"markdownRemark":{"id":"cff08e9e-8453-5562-9099-8b15a974c569","excerpt":"前情提要 最近在開發一個功能是匯出 Excel，由於牽扯到權限的問題，如果另外開啟一個分頁的話，沒辦法從  中拿出  自動帶在 header 裡面，因此我透過 api 取得 backend 匯出的 excel，並透過  來產生一個 URL 對應到這個 excel ，這樣就可以下載這個檔案了。 What is URL…","html":"<h2>前情提要</h2>\n<p>最近在開發一個功能是匯出 Excel，由於牽扯到權限的問題，如果另外開啟一個分頁的話，沒辦法從 <code class=\"language-text\">localStorage</code> 中拿出 <code class=\"language-text\">api token</code> 自動帶在 header 裡面，因此我透過 api 取得 backend 匯出的 excel，並透過 <code class=\"language-text\">URL.createObjectURL</code> 來產生一個 URL 對應到這個 excel ，這樣就可以下載這個檔案了。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">browser -> call export excel api -> get excel in js ->\ncall URL.createObjectURL -> open return url ->\ncall URL.revokeObjectURL</code></pre></div>\n<h2>What is URL.createObjectURL?</h2>\n<p>先來介紹一下 <code class=\"language-text\">URL.createObjectURL</code> ，這是一個 function 提供使用者傳入 <code class=\"language-text\">Blob</code>, <code class=\"language-text\">File</code> 等 binary 的資料，並產生一個 URL，讓使用者可以透過讀取這個 url 來讀取 binary data，<code class=\"language-text\">URL.createObjectURL</code> 會將 binary data 儲存在 browser 的 memory，並產生一個 URL 對應到該 binary data，所以記得要呼叫 <code class=\"language-text\">URL.revokeObjectURL</code> 來釋放這個資源，說明可能有點模糊，我們來搭配一些例子。</p>\n<h4>顯示圖片</h4>\n<p>圖片是一個 binary file，假設使用者上傳一個圖片，我們想要提供預覽圖片的功能（先假裝我們沒有 FileReader），我們可以透過 <code class=\"language-text\">const url = URL.createObjectURL(__USER_UPLOAD_FILE__)</code>，來建立一個 URL 對應到這個 file ，之後透過 <code class=\"language-text\">img.src = url</code>，就可以顯示圖片了。</p>\n<h4>下載檔案</h4>\n<p>假設我們要產生一個巨大的 excel 檔，直接 <code class=\"language-text\">window.open</code>，會卡超級久，我們可以透過 api call 拿回整個 excel 的 binary data ，並且能夠在產生 excel 的途中顯示這個 loading state，提供較好的 UX。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// display loading</span>\n<span class=\"token keyword\">const</span> resp <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"excel\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> anchor <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\nanchor<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> url\nanchor<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">\"__FILENAME__\"</span>\nanchor<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">revokeObjectURL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// dismiss loading</span></code></pre></div>\n<h2>What is the problem now?</h2>\n<p>從上面的例子可以看出 <code class=\"language-text\">URL.createObjectURL</code> 非常萬用，但是我在最新個 chrome 使用 <code class=\"language-text\">URL.createObjectURL</code> 時，遇到下面的錯誤。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Failed to execute 'createObjectURL' on 'URL': No function was found that matched the signature provided.</code></pre></div>\n<p>經過一番搜尋之後，知道了現在推薦直接使用 <code class=\"language-text\">MediaSource</code>, <code class=\"language-text\">MediaStream</code>, <code class=\"language-text\">Blob</code>, <code class=\"language-text\">File</code> 等 binary 資料，而不透過 <code class=\"language-text\">URL.createObjectURL</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> mediaSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mediaStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'srcObject'</span> <span class=\"token keyword\">in</span> video<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  video<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> mediaSource or mediaStream<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  video<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>mediaSource or mediaStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'srcObject'</span> <span class=\"token keyword\">in</span> img<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  img<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> blob or file<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob or file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>對於 media 的元素來說，這沒有什麼問題，但是如果我們想要達成下載 excel 的範例，就我所知目前沒有任何辦法。</p>\n<h2>What can we do?</h2>\n<p>我想到的方法是是改變我們的下載流程。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 原始流程\ncall export excel api -> get excel binary -> create URL -> download file by js.\n// 修改後的流程\ncall export excel api -> return url for exported excel -> open url.</code></pre></div>\n<p>差別就在於現在我們不能直接輸出 excel 到 http response，而是先產生一個 file 到 storage (like S3 for example)，再回傳這個 download url 給 browser ，然後 browser 再去開啟這個檔案，如此一來我們還是可以保有 error handling &#x26; loading state。</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\">https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL</a></li>\n<li><a href=\"https://stackoverflow.com/questions/27120757/failed-to-execute-createobjecturl-on-url\">https://stackoverflow.com/questions/27120757/failed-to-execute-createobjecturl-on-url</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject\">https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject</a></li>\n</ul>","frontmatter":{"title":"URL.createObjectURL","tags":["writing","web","download","blob","file"],"date":"September 07, 2020","description":"URL.createObjectURL is deprecated :shocked:"}}},"pageContext":{"slug":"/createobjecturl/","previous":{"fields":{"slug":"/webpack-defineplugin/"},"frontmatter":{"title":"webpack DefinePlugin","tags":["writing","webpack","env","environment"]}},"next":{"fields":{"slug":"/electron-mac-app-store-sign/"},"frontmatter":{"title":"Electron mac app store sign","tags":["writing","mac app store","mas","electron","sign","deployment"]}}}},"staticQueryHashes":["4111554205","63159454"]}