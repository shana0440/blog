{"componentChunkName":"component---src-templates-blog-post-js","path":"/writings/deep-in-to-bloc/","result":{"data":{"site":{"siteMetadata":{"title":"KWGUO Blog"}},"markdownRemark":{"id":"2db2c94c-d46d-5344-b861-cd3ff0d40286","excerpt":"目前手上的專案是採用 BLoC Pattern，當初採用這個 Pattern 的理由滿簡單的，就是網路上滿多人推薦，而且我不喜歡 redux，因為太多 boilerplate。 先來簡單介紹一下 BLoC Pattern 吧，這個 Pattern 跟 MVC, MVVM 一樣，都是用來將一些商業邏輯抽離 View…","html":"<p>目前手上的專案是採用 BLoC Pattern，當初採用這個 Pattern 的理由滿簡單的，就是網路上滿多人推薦，而且我不喜歡 redux，因為太多 boilerplate。</p>\n<p>先來簡單介紹一下 BLoC Pattern 吧，這個 Pattern 跟 MVC, MVVM 一樣，都是用來將一些商業邏輯抽離 View，讓 View 盡量單純的設計模式，BLoC 是用 Stream 來通知 View state 的改變，view 則針對這個 state 來建立 widget，網路上已經有不少文章再介紹 BLoC Pattern 了，我也就不特別花篇幅重新介紹，看過這個<a href=\"https://www.youtube.com/watch?v=PLHln7wHgPE\">影片</a>，就應該會有不少了解了。</p>\n<p>現在我們來使用 BLoC Pattern 寫一個根據使用者輸入的關鍵字，來搜尋列表的 Widget 吧。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlocSearchListBloc</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Bloc</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlocSearchListEvent</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BlocSearchListState</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">ItemRepository</span> _itemRepo <span class=\"token operator\">=</span> <span class=\"token class-name\">GetIt.I</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ItemRepository</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">BlocSearchListState</span> <span class=\"token keyword\">get</span> initialState <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">IdleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlocSearchListState</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">mapEventToState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">BlocSearchListEvent</span> event<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token keyword\">async*</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">is</span> <span class=\"token class-name\">SearchEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token class-name\">LoadingState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">final</span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> _itemRepo<span class=\"token punctuation\">.</span><span class=\"token function\">searchItems</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>keyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token class-name\">DisplayState</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> keyword<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchEvent</span><span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SearchList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatelessWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Column</span><span class=\"token punctuation\">(</span>\n      children<span class=\"token punctuation\">:</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Widget</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span>\n        <span class=\"token class-name\">TextField</span><span class=\"token punctuation\">(</span>onChanged<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">final</span> bloc <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>bloc<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlocSearchListBloc</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          bloc<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Expanded</span><span class=\"token punctuation\">(</span>\n          child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">BlocBuilder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlocSearchListBloc</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BlocSearchListState</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">is</span> <span class=\"token class-name\">LoadingState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"loading...\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">is</span> <span class=\"token class-name\">DisplayState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"no result\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">ListView</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>\n                  itemCount<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n                  itemBuilder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ListTile</span><span class=\"token punctuation\">(</span>\n                      title<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n\n              <span class=\"token keyword\">return</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"try search something\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面是一個經典的 BLoC Pattern，可以看到我們的 View 單純的根據 state 來產生 widget ，成功的分離了商業邏輯跟畫面，但這段程式有個問題，當使用者輸入 <code class=\"language-text\">abcd</code> 的時候，我們應該只需要關注 <code class=\"language-text\">abcd</code> 的結果就好了，前面的結果對我們而言是不重要的，但這段程式卻會取得 <code class=\"language-text\">a</code> 的結果後，再去取得 <code class=\"language-text\">ab</code> 的結果，以此類推，最後取得 <code class=\"language-text\">abcd</code> 的結果的時候，我們已經等待了 <code class=\"language-text\">a</code>, <code class=\"language-text\">ab</code>, <code class=\"language-text\">abc</code>, <code class=\"language-text\">abcd</code> 四個 query 的時間，這導致使用者會覺得畫面卡住了，一直卡在 <code class=\"language-text\">LoadingState</code>。</p>\n<h2>Deep in to BLoC source code</h2>\n<p>透過 BLoC source code 來找找看問題在哪裡，我這邊只節錄一些相關的 function。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bloc</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Sink</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">PublishSubject</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">></span></span> _eventSubject <span class=\"token operator\">=</span> <span class=\"token class-name\">PublishSubject</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">BehaviorSubject</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> _stateSubject<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/// Transforms the [events] stream along with a [next] function into a `Stream&lt;State>`.</span>\n  <span class=\"token comment\">/// Events that should be processed by [mapEventToState] need to be passed to [next].</span>\n  <span class=\"token comment\">/// By default `asyncExpand` is used to ensure all [events] are processed in the order</span>\n  <span class=\"token comment\">/// in which they are received. You can override [transformEvents] for advanced usage</span>\n  <span class=\"token comment\">/// in order to manipulate the frequency and specificity with which [mapEventToState]</span>\n  <span class=\"token comment\">/// is called as well as which [events] are processed.</span>\n  <span class=\"token comment\">///</span>\n  <span class=\"token comment\">/// For example, if you only want [mapEventToState] to be called on the most recent</span>\n  <span class=\"token comment\">/// [event] you can use `switchMap` instead of `asyncExpand`.</span>\n  <span class=\"token comment\">///</span>\n  <span class=\"token comment\">/// ```dart</span>\n  <span class=\"token comment\">/// @override</span>\n  <span class=\"token comment\">/// Stream&lt;State> transformEvents(events, next) => events.switchMap(next);</span>\n  <span class=\"token comment\">/// ```</span>\n  <span class=\"token comment\">///</span>\n  <span class=\"token comment\">/// Alternatively, if you only want [mapEventToState] to be called for distinct [events]:</span>\n  <span class=\"token comment\">///</span>\n  <span class=\"token comment\">/// ```dart</span>\n  <span class=\"token comment\">/// @override</span>\n  <span class=\"token comment\">/// Stream&lt;State> transformEvents(events, next) {</span>\n  <span class=\"token comment\">///   return super.transformEvents(</span>\n  <span class=\"token comment\">///     events.distinct(),</span>\n  <span class=\"token comment\">///     next,</span>\n  <span class=\"token comment\">///   );</span>\n  <span class=\"token comment\">/// }</span>\n  <span class=\"token comment\">/// ```</span>\n  <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">transformEvents</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">></span></span> events<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">)</span> next<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> events<span class=\"token punctuation\">.</span><span class=\"token function\">asyncExpand</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">mapEventToState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Event</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/// Transforms the `Stream&lt;State>` into a new `Stream&lt;State>`.</span>\n  <span class=\"token comment\">/// By default [transformStates] returns the incoming `Stream&lt;State>`.</span>\n  <span class=\"token comment\">/// You can override [transformStates] for advanced usage</span>\n  <span class=\"token comment\">/// in order to manipulate the frequency and specificity at which `transitions` (state changes)</span>\n  <span class=\"token comment\">/// occur.</span>\n  <span class=\"token comment\">///</span>\n  <span class=\"token comment\">/// For example, if you want to debounce outgoing [states]:</span>\n  <span class=\"token comment\">///</span>\n  <span class=\"token comment\">/// ```dart</span>\n  <span class=\"token comment\">/// @override</span>\n  <span class=\"token comment\">/// Stream&lt;State> transformStates(Stream&lt;State> states) {</span>\n  <span class=\"token comment\">///   return states.debounceTime(Duration(seconds: 1));</span>\n  <span class=\"token comment\">/// }</span>\n  <span class=\"token comment\">/// ```</span>\n  <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">transformStates</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> states<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> states<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">_bindStateSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Event</span> currentEvent<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">transformStates</span><span class=\"token punctuation\">(</span><span class=\"token function\">transformEvents</span><span class=\"token punctuation\">(</span>_eventSubject<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Event</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      currentEvent <span class=\"token operator\">=</span> event<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">mapEventToState</span><span class=\"token punctuation\">(</span>currentEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>_handleError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span> nextState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">==</span> nextState <span class=\"token operator\">||</span> _stateSubject<span class=\"token punctuation\">.</span>isClosed<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> transition <span class=\"token operator\">=</span> <span class=\"token class-name\">Transition</span><span class=\"token punctuation\">(</span>\n          currentState<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">,</span>\n          event<span class=\"token punctuation\">:</span> currentEvent<span class=\"token punctuation\">,</span>\n          nextState<span class=\"token punctuation\">:</span> nextState<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token class-name\">BlocSupervisor</span><span class=\"token punctuation\">.</span>delegate<span class=\"token punctuation\">.</span><span class=\"token function\">onTransition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> transition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">onTransition</span><span class=\"token punctuation\">(</span>transition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          _stateSubject<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Object</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">_handleError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到 BLoC 的程式碼非常簡單，首先最重要的就是 <code class=\"language-text\">_bindStateSubject</code> 了，這邊透過 <code class=\"language-text\">transformEvents</code> 把 event 轉變為 state, 再透過 <code class=\"language-text\">transformStates</code> 把 state 變成 state，之後在把 state 加到 <code class=\"language-text\">_stateSubject</code> 中，我們的 view 就會針對這個 state 進行重建。</p>\n<p>來看一下 <code class=\"language-text\">transformEvents</code>，這邊透過 <code class=\"language-text\">asyncExpand</code> 把 event 轉成 state，<code class=\"language-text\">asyncExpand</code> 會確保 event 被正確處理完畢之後，才處理下一個 event ，這就是我們上面遇到的問題！註解也有說明，我們可以 override 這個 function ，改成 <code class=\"language-text\">events.switchMap(next)</code> ，就會變成只取得最後一個 event，而這恰好就是我們要的。</p>\n<p>我們也來看一下 <code class=\"language-text\">asyncExpand</code> 的原始碼吧</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> asyncExpand<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _StreamControllerBase<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> controller<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">StreamSubscription</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> subscription<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">onListen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>controller <span class=\"token operator\">is</span> _StreamController <span class=\"token operator\">||</span>\n          controller <span class=\"token operator\">is</span> _BroadcastStreamController<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      subscription <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> newStream<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          newStream <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          controller<span class=\"token punctuation\">.</span><span class=\"token function\">addError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newStream <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          subscription<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          controller<span class=\"token punctuation\">.</span><span class=\"token function\">addStream</span><span class=\"token punctuation\">(</span>newStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">.</span>resume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          onError<span class=\"token punctuation\">:</span> controller<span class=\"token punctuation\">.</span>_addError<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Avoid Zone error replacement.</span>\n          onDone<span class=\"token punctuation\">:</span> controller<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isBroadcast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamController</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span><span class=\"token function\">broadcast</span><span class=\"token punctuation\">(</span>\n          onListen<span class=\"token punctuation\">:</span> onListen<span class=\"token punctuation\">,</span>\n          onCancel<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            subscription<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">sync</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamController</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n          onListen<span class=\"token punctuation\">:</span> onListen<span class=\"token punctuation\">,</span>\n          onPause<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            subscription<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          onResume<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            subscription<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          onCancel<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> subscription<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">sync</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> controller<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">asyncExpand</code> 最重要的就是那段 <code class=\"language-text\">onListen</code> 了，<code class=\"language-text\">convert</code> 就是我們的 <code class=\"language-text\">mapEventToState</code>，可以看到如果 <code class=\"language-text\">convert</code> 回傳一個 stream 的話，我們會暫停目前的 stream，也就是 events，直到 <code class=\"language-text\">newStream</code> 發出 done event，才會繼續處理下一個 event。</p>\n<p><code class=\"language-text\">transformStates</code> 預設是什麼都不做，我也暫時想不到會有什麼需求是要動到 <code class=\"language-text\">transformStates</code> 🤔</p>\n<p>回到一開始的範例，要讓他正常運作，我們只需要把 BLoC 修改為下面這段程式碼即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlocSearchListBloc</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Bloc</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlocSearchListEvent</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BlocSearchListState</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">ItemRepository</span> _itemRepo <span class=\"token operator\">=</span> <span class=\"token class-name\">GetIt.I</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ItemRepository</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">BlocSearchListState</span> <span class=\"token keyword\">get</span> initialState <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">IdleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlocSearchListState</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">transformEvents</span><span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> events<span class=\"token punctuation\">.</span><span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlocSearchListState</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">mapEventToState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">BlocSearchListEvent</span> event<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token keyword\">async*</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">is</span> <span class=\"token class-name\">SearchEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token class-name\">LoadingState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">final</span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> _itemRepo<span class=\"token punctuation\">.</span><span class=\"token function\">searchItems</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>keyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token class-name\">DisplayState</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> keyword<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchEvent</span><span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Deep in to BLoC","tags":["writing","flutter","state","bloc"],"date":"March 08, 2020","description":"introduce BLoC pattern and the problem I encounter"}}},"pageContext":{"slug":"/deep-in-to-bloc/","previous":{"fields":{"slug":"/android-intent-flag_activity_new_task/"},"frontmatter":{"title":"Android Intent FLAG_ACTIVITY_NEW_TASK","tags":["writing","android","intent"]}},"next":{"fields":{"slug":"/flutter-setstate/"},"frontmatter":{"title":"flutter setState","tags":["writing","flutter","state"]}}}},"staticQueryHashes":["4111554205","63159454"]}