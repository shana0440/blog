{"componentChunkName":"component---src-templates-blog-post-js","path":"/writings/travel-of-svelte/","result":{"data":{"site":{"siteMetadata":{"title":"KWGUO Blog"}},"markdownRemark":{"id":"de38c072-657b-57a6-b99f-12902cea1714","excerpt":"從幾個月前開始，我決定寫一個番茄鐘程式來幫助我保持專注，以及追蹤我過往的情況，在這個專案中，我決定給以前一直久仰大名，但是沒有什麼機會嘗試的 svelte 一個機會，這篇文章主要是記錄一些我在使用 svelte 上遇到的問題，以及我對他的想法。 Pros 第一個我想提的就是 svelte 的語法非常的親切，svelte…","html":"<p>從幾個月前開始，我決定寫一個番茄鐘程式來幫助我保持專注，以及追蹤我過往的情況，在這個專案中，我決定給以前一直久仰大名，但是沒有什麼機會嘗試的 svelte 一個機會，這篇文章主要是記錄一些我在使用 svelte 上遇到的問題，以及我對他的想法。</p>\n<h2>Pros</h2>\n<p>第一個我想提的就是 svelte 的語法非常的親切，svelte 的語法像是樣板引擎提供的語法，下面比較一下迴圈的寫法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// react</span>\ntasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>TaskItem <span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// svelte</span>\n<span class=\"token punctuation\">{</span>#each tasks <span class=\"token keyword\">as</span> <span class=\"token function\">task</span> <span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">&lt;</span>TaskItem <span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>each<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// vue</span>\n<span class=\"token operator\">&lt;</span>TaskItem v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"task in tasks\"</span> task<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span>key<span class=\"token operator\">=</span><span class=\"token string\">\"item.id\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>語法的問題基本上是習慣就好了，但是 svelte 對我來說相當容易上手，寫錯的話就是沒辦法編譯，不用太擔心打錯字什麼的。</p>\n<p>再來是 state 的部分，svelte 非常聰明，會自動追蹤關聯的 state 變化來重新渲染 component，同樣的事情在 react 上就會複雜許多。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// react</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// svelte</span>\n<span class=\"token keyword\">let</span> count\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 很久沒碰 vue 了不清楚 3.0 是怎樣了就不獻醜了</span></code></pre></div>\n<p>可以看到 react 需要額外引入 <code class=\"language-text\">useState</code> ，如果是用 class component 的話，也要透過 <code class=\"language-text\">setState</code> 來觸發 rendering，svelte 對待 state 就像對待普通的變數一樣，不須用額外做什麼事情，非常的親切。</p>\n<p>接著是 computed state，有些 state 會依據其他輸入來產生，當其他輸入發生變化的時候，這個 state 也需要跟著改變，這在 svelte 也是非常容易處理。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// react</span>\n<span class=\"token keyword\">const</span> aheadCount <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// svelte</span>\n<span class=\"token literal-property property\">$</span><span class=\"token operator\">:</span> aheadCount <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<p>svelte 提供一個 reactive declarations，任何透過 <code class=\"language-text\">$</code> 宣告的變數， svelte 會自動去找出他依賴於那些變數，在那些變數發生變化的時候自動重建，在 react 中，這需要透過 dependency array 來控制，還需要 linter 來幫助免得忘記輸入，不得不說 svelte 真的是弄得非常方便，而且 reactive declarations 是可以接收一個 function 的，即便這個變數的組成在怎麼複雜，也可以很清楚的表達，也可以透過 IIFE (Immedicately Invoked Function Expression)。</p>\n<p>reactive declarations 的威力還不止如此，我們可以透過他建立一個 scope，在該 scope 裡面的程式會自動執行，當依賴的變數發生改變。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// react</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// svelte</span>\n<span class=\"token literal-property property\">$</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>svelte 不需用像 react 一樣要額外引入 hook 就可以做到同樣的事情，而且不用處理 dependency array 真的是非常方便。</p>\n<p>整體來說用 svelte 開發是一個非常愉快的體驗，不須用花什麼時間來適應框架，可惜的是 svelte 有些不是那麼方便的地方，但我非常期待 svelte 以後的發展。</p>\n<h2>Cons</h2>\n<p>在我開發番茄鐘的過程中，遇到了一些問題，首先是 function 沒辦法回傳 component ，因此很難做到非常通用的客製化。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// react</span>\n<span class=\"token operator\">&lt;</span>List\n\t<span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">}</span>\n  renderItem<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">it</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>it<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// List.jsx</span>\n<span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>renderItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></code></pre></div>\n<p>在 react 中很常會看到像上面這種程式碼， react 使用 jsx 的關係，讓 function 可以自由的回傳任何的 component，這讓 react 中 component 的組合變得非常的自由，同樣的事情要在 svelte 中完成會變成相當複雜。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// svelte</span>\n<span class=\"token keyword\">import</span> Item <span class=\"token keyword\">from</span> <span class=\"token string\">'./Item.svelte'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>List <span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">}</span> renderOptions<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Item<span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">extraProps</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">></span>\n\n<span class=\"token comment\">// List.svelte</span>\n<span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">{</span>#each items <span class=\"token keyword\">as</span> item<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token operator\">&lt;</span>svelte<span class=\"token operator\">:</span>component <span class=\"token keyword\">this</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>renderOptions<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>renderOptions<span class=\"token punctuation\">.</span>extraProps<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>each<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// Item.svelte</span>\n<span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></code></pre></div>\n<p>同樣的事情在 react 中是非常簡單的，寫起來也非常直覺，但是在 svelte 中就非常的複雜，非常希望 svelte 讓這變得更加簡單。</p>\n<p>另外 react declarations 也沒有 react 中的 useEffect 靈活，例如我們想要在 props 改變的時候 reset local state ，在 react 就相當簡單，在 svelte 就比較麻煩。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// react</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// reset state</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// svelte</span>\n<span class=\"token keyword\">let</span> prevProps\n\n<span class=\"token literal-property property\">$</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps <span class=\"token operator\">!=</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// reset state</span>\n    prevProps <span class=\"token operator\">=</span> props\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>現在 svelte 對 typescript 的支援還不是很好，沒辦法做到 generic ，因此在使用上並沒有像 react 如此的方便。</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://pomodoro.kwguo.me\">https://pomodoro.kwguo.me</a></li>\n</ul>","frontmatter":{"title":"Travel of svelte","tags":["writing","svelte"],"date":"January 24, 2022","description":"My experience about svelte"}}},"pageContext":{"slug":"/travel-of-svelte/","previous":{"fields":{"slug":"/android-and-ios-badge-count/"},"frontmatter":{"title":"Android and iOS badge count","tags":["writing","android","ios","badge count","notification"]}},"next":{"fields":{"slug":"/match-all-items-sql/"},"frontmatter":{"title":"Match all items SQL","tags":["writing","sql"]}}}},"staticQueryHashes":["4111554205","63159454"]}