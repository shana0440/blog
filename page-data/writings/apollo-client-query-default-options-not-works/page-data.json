{"componentChunkName":"component---src-templates-blog-post-js","path":"/writings/apollo-client-query-default-options-not-works/","result":{"data":{"site":{"siteMetadata":{"title":"KWGUO Blog"}},"markdownRemark":{"id":"aa16638f-dc59-52fc-bf87-f500ea0b5c9a","excerpt":"首先這是一個愚蠢的錯誤，但是花了滿多時間 trace code 才知道問題出在哪裡，在這邊紀錄一下，免得以後忘記。 Basic knowledge 目前的專案使用  這個套件，來自動幫我們從 graphql query language 生成對應的 typescript，以及 react hook…","html":"<p>首先這是一個愚蠢的錯誤，但是花了滿多時間 trace code 才知道問題出在哪裡，在這邊紀錄一下，免得以後忘記。</p>\n<h2>Basic knowledge</h2>\n<p>目前的專案使用 <code class=\"language-text\">graphql-codegen</code> 這個套件，來自動幫我們從 graphql query language 生成對應的 typescript，以及 react hook 來方便我們使用，下面是一個範例。</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>\n  <span class=\"token property\">email</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">query</span> <span class=\"token definition-query function\">Me</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">email</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的 query 會被生成下面對應的 hook，並且可以使用在 react component 中。s</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Profile</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> loading<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">error</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">loading</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在我們使用這個 query 之前呢，我們需要先設定好 <code class=\"language-text\">ApolloProvider</code>，在 <code class=\"language-text\">ApolloProvider</code> 中提供 <code class=\"language-text\">ApolloClient</code> ，這樣 <code class=\"language-text\">useXXXQuery</code> 就可以使用我們設定好的 client。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">GraphqlProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    defaultOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        fetchPolicy<span class=\"token operator\">:</span> <span class=\"token string\">\"no-cache\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApolloProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>client<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ApolloProvider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>What happened</h2>\n<p>可以看到我們在上面請 apollo client 不要使用 cache，但實際上我們在用的時候，發現 apollo client 還是會使用 query ，這引出了一個 bug，在我們的 app 裡面，第三方的 api 要求我們傳目前使用者的語言過去，他們會回傳對應的語言，我們透過 header 來傳送使用者目前的語言，當使用者一開始是英語，我們送出 query 取得英語的資料，再來使用者換成中文，apollo client 就直接從 cache 裡面拿資料，而不會在送出新的 query ，因為 apollo client 只有在 variables 不同的時候才會送出新的 query ，當他發現 variables 中的資料都相同，以前有查詢過相同的資料，就會從 cache 裡面拿，所以使用者就只能一直看到英文的資料。</p>\n<p>我們就很好奇為什麼 default options 並沒有用，於是開始我們的 trace code 之旅。</p>\n<p><code class=\"language-text\">useMeQuery</code> 實際上是下面這段程式碼</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useMeQuery</span> <span class=\"token operator\">=</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// MeQueryDocument is we defined `query Me {...}`</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useBaseQuery</span><span class=\"token punctuation\">(</span>MeQueryDocument<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而 <code class=\"language-text\">useBaseQuery</code> 會建立一個 <code class=\"language-text\">QueryData</code>，並執行 <code class=\"language-text\">QueryData.execute()</code> 來取得資料。\n接著 <code class=\"language-text\">QueryData.execute()</code> 會從 <code class=\"language-text\">getExecuteResult</code> 來取的結果。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">public</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> QueryResult<span class=\"token operator\">&lt;</span>TData<span class=\"token punctuation\">,</span> TVariables<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">refreshClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> skip<span class=\"token punctuation\">,</span> query <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>skip <span class=\"token operator\">||</span> query <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>previousData<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeQuerySubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>previousData<span class=\"token punctuation\">.</span>query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateObservableQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">startQuerySubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExecuteSsrResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExecuteResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>來看一下 <code class=\"language-text\">getExecuteResult</code> 的 implementation</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">private</span> <span class=\"token function\">getExecuteResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> QueryResult<span class=\"token operator\">&lt;</span>TData<span class=\"token punctuation\">,</span> TVariables<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueryResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">startQuerySubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看到他從 <code class=\"language-text\">this.getQueryResult</code> 取得了 query 的結果。</p>\n<p><code class=\"language-text\">getQueryResult</code> 很長，我只節錄相關的部分。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">private</span> getQueryResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> QueryResult<span class=\"token operator\">&lt;</span>TData<span class=\"token punctuation\">,</span> TVariables<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>skip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentObservable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> currentResult <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentObservable<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> loading<span class=\"token punctuation\">,</span> partial<span class=\"token punctuation\">,</span> networkStatus<span class=\"token punctuation\">,</span> errors <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> currentResult\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看出他從 <code class=\"language-text\">this.currentObservable.getCurrentResult</code> 來取得資料，接著我們來看 <code class=\"language-text\">currentObservable</code> 是怎麼被建立出來的。</p>\n<p>可以找到 <code class=\"language-text\">initializeObservableQuery</code>，中間有段程式是這樣。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentObservable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentObservable <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">refreshClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">watchQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>observableQueryOptions<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這邊的 client 就是指 apollo client，我們來看一下 apollo client 的 watchQuery 做了什麼</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">public</span> <span class=\"token generic-function\"><span class=\"token function\">watchQuery</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> TVariables <span class=\"token operator\">=</span> OperationVariables<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  options<span class=\"token operator\">:</span> WatchQueryOptions<span class=\"token operator\">&lt;</span>TVariables<span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ObservableQuery<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TVariables<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultOptions<span class=\"token punctuation\">.</span>watchQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    options <span class=\"token operator\">=</span> <span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultOptions<span class=\"token punctuation\">.</span>watchQuery<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// XXX Overwriting options is probably not the best way to do this long term...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>disableNetworkFetches <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>fetchPolicy <span class=\"token operator\">===</span> <span class=\"token string\">'network-only'</span> <span class=\"token operator\">||</span>\n      options<span class=\"token punctuation\">.</span>fetchPolicy <span class=\"token operator\">===</span> <span class=\"token string\">'cache-and-network'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>options<span class=\"token punctuation\">,</span> fetchPolicy<span class=\"token operator\">:</span> <span class=\"token string\">'cache-first'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queryManager<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">watchQuery</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TVariables<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">this.defaultOptions.watchQuery</code> o.O ，這就是為什麼我們的 default options 沒用，因為從一開始就用錯惹 lol。</p>\n<h2>後記</h2>\n<p>寫這種 trace code 的文章真的滿難的，想寫的很詳細，但這樣文章又會太長，而且充滿無關的程式碼，去除一些程式碼，就變得很像魔法，突然就找到下一個在哪，但其實中間都花了很多時間在理解程式，很難把其中的心酸寫出來 QQ</p>","frontmatter":{"title":"apollo-client query default options not works?","tags":["writing","graphql","apollo","react"],"date":"December 11, 2020","description":"A lesson learned"}}},"pageContext":{"slug":"/apollo-client-query-default-options-not-works/","previous":{"fields":{"slug":"/rfc-1738/"},"frontmatter":{"title":"RFC 1738","tags":["writing","url","rfc","rfc-1738"]}},"next":{"fields":{"slug":"/hide-sensitive-information-on-mobile/"},"frontmatter":{"title":"Hide sensitive information on mobile","tags":["writing","ios","android"]}}}},"staticQueryHashes":["4111554205","63159454"]}