{"componentChunkName":"component---src-templates-blog-post-js","path":"/writings/ios-race-conditions/","result":{"data":{"site":{"siteMetadata":{"title":"KWGUO Blog"}},"markdownRemark":{"id":"321ad23b-59bd-5c0b-938e-7d3881ece53f","excerpt":"I’m a newbie of iOS, and this post is for swift, I don’t know anything about objective-c. The story is we have a feature is our app will send the message to our…","html":"<p>I’m a newbie of iOS, and this post is for swift, I don’t know anything about objective-c.</p>\n<p>The story is we have a feature is our app will send the message to our server, but if the app is offline, we will like to store the data in the local storage, and send the message after it online, to avoid store too many message, we only store the 500 message, if the message is more than 500, then we drop the old message.</p>\n<p>Here is the sample code of this feature.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> dispatchQueue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DispatchQueue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">global</span><span class=\"token punctuation\">(</span>qos<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> maximumMessageCount <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">storeMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  dispatchQueue<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token function\">getMessageCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> count <span class=\"token operator\">>=</span> maximumMessageCount <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// TODO: drop oldest message</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// TODO: store message</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, the above have a race condition issue, the thread might check the count smaller than 500 before we store the message, so it might have many thread pass the check, but the message already over the 500 records.</p>\n<p>To fix this problem, we have Lock in most languages, we also have lock in swift, it call <code class=\"language-text\">NSLock</code>, it really easy to use.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> dispatchQueue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DispatchQueue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">global</span><span class=\"token punctuation\">(</span>qos<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> maximumMessageCount <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n<span class=\"token keyword\">let</span> lock <span class=\"token operator\">=</span> <span class=\"token class-name\">NSLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">storeMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  dispatchQueue<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n    lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token function\">getMessageCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> count <span class=\"token operator\">>=</span> maximumMessageCount <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// TODO: drop oldest message</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// TODO: store message</span>\n    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But we have the better options for swift, we have the GCD, it can help you handle the concurrent code execution, in face we already using it, the dispatch queue is the GCD, but I’m not using it correctly.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// I'm not sure why the global dispatch queue will still have issue, please tell me if you know anything.</span>\n<span class=\"token keyword\">let</span> dispatchQueue <span class=\"token operator\">=</span> <span class=\"token class-name\">DispatchQueue</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Message Queue\"</span></span><span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> maximumMessageCount <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">storeMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  dispatchQueue<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span>flags<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>barrier<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token function\">getMessageCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> count <span class=\"token operator\">>=</span> maximumMessageCount <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// TODO: drop oldest message</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// TODO: store message</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When we’re using the <code class=\"language-text\">.barrier</code> flags, in that queue, only one task will be executed at a time, so don’t need to worry about race condition anymore :D</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://medium.com/swiftcairo/avoiding-race-conditions-in-swift-9ccef0ec0b26\">https://medium.com/swiftcairo/avoiding-race-conditions-in-swift-9ccef0ec0b26</a></li>\n<li><a href=\"https://developer.apple.com/documentation/dispatch/dispatchworkitemflags/1780674-barrier\">https://developer.apple.com/documentation/dispatch/dispatchworkitemflags/1780674-barrier</a></li>\n<li><a href=\"https://developer.apple.com/documentation/dispatch/dispatch_barrier\">https://developer.apple.com/documentation/dispatch/dispatch_barrier</a></li>\n</ul>","frontmatter":{"title":"iOS race conditions","tags":["writing","ios","swift"],"date":"August 31, 2021","description":"About the race condition in iOS"}}},"pageContext":{"slug":"/ios-race-conditions/","previous":{"fields":{"slug":"/import-private-key-to-ssh-agent/"},"frontmatter":{"title":"Import private key to ssh-agent","tags":["writing","ssh","linux","devops"]}},"next":{"fields":{"slug":"/notification-of-ios/"},"frontmatter":{"title":"Notification of iOS","tags":["writing","iOS","Notification","APNs"]}}}},"staticQueryHashes":["4111554205","63159454"]}