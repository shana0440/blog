{"componentChunkName":"component---src-templates-blog-post-js","path":"/writings/android-compose-ui-lift-state-up/","result":{"data":{"site":{"siteMetadata":{"title":"KWGUO Blog"}},"markdownRemark":{"id":"a476bbb6-055a-526b-8705-2a7e295b793a","excerpt":"這邊文章是基於 \n由於 Compose UI 仍然在 alpha 階段，任何 API 都尚未確定，請確定自己使用的版本並以官方文件為主。\n 在  已經被改名為  在 React 中，如果我們想要讓兩個 component 共用一個 state ，在傳統的作法，我們可能會引入 redux 這種套件來處理共享 state…","html":"<blockquote>\n<p>這邊文章是基於 <code class=\"language-text\">1.0.0-alpha10</code>\n由於 Compose UI 仍然在 alpha 階段，任何 API 都尚未確定，請確定自己使用的版本並以<a href=\"https://developer.android.com/jetpack/compose\">官方文件</a>為主。\n<code class=\"language-text\">Ambient</code> 在 <code class=\"language-text\">1.0.0-alpha12</code> 已經被改名為 <code class=\"language-text\">CompositionLocal</code></p>\n</blockquote>\n<p>在 React 中，如果我們想要讓兩個 component 共用一個 state ，在傳統的作法，我們可能會引入 redux 這種套件來處理共享 state，但是在有個 context 的情況下，我們就不需用 redux 這麼複雜的解決方案了，我們可以單純的將共同的 state 上升到兩個 component 共同的 ancestor，再透過 context 傳遞 state ，這樣兩個 component 就可以共享同一個 state 了。</p>\n<h3>Ambient</h3>\n<p>在 Compose UI 我們要怎麼做到這件事情呢？\nCompose UI 提供了 Ambient + Providers 來讓我們能做到相同的事情，下面是一個 Ambient + Providers 的範例。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> IntlViewModel<span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> mutLocale <span class=\"token operator\">=</span> MutableLiveData<span class=\"token operator\">&lt;</span>Locale<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>Locale<span class=\"token punctuation\">.</span>EN<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> locale<span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>Locale<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> mutLocale\n\n  <span class=\"token keyword\">val</span> <span class=\"token function\">updateLocale</span><span class=\"token punctuation\">(</span>locale<span class=\"token operator\">:</span> Locale<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mutLocale<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> locale\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> AmbientIntlViewModel <span class=\"token operator\">=</span> ambientOf<span class=\"token operator\">&lt;</span>IntlViewModel<span class=\"token operator\">></span>\n\n<span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> intlViewModel <span class=\"token operator\">=</span> viewModel<span class=\"token operator\">&lt;</span>IntlViewModel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">Providers</span><span class=\"token punctuation\">(</span>AmbientIntlViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">provides</span><span class=\"token punctuation\">(</span>intlViewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">HomeScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">HomeScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> intlViewModel <span class=\"token operator\">=</span> AmbientIntlViewModel<span class=\"token punctuation\">.</span>current\n  <span class=\"token keyword\">val</span> locale <span class=\"token operator\">=</span> intlViewModel<span class=\"token punctuation\">.</span>locale<span class=\"token punctuation\">.</span><span class=\"token function\">observeAsState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value\n  <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string-literal singleline\"><span class=\"token string\">\"current locale is %s\"</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>locale<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://zh-hant.reactjs.org/docs/lifting-state-up.html\">https://zh-hant.reactjs.org/docs/lifting-state-up.html</a></li>\n<li><a href=\"https://foso.github.io/Jetpack-Compose-Playground/general/compositionlocal/\">https://foso.github.io/Jetpack-Compose-Playground/general/compositionlocal/</a></li>\n</ul>","frontmatter":{"title":"Android Compose UI lift state up","tags":["writing","android","compose ui","state management"],"date":"February 27, 2021","description":"How to share the state in Compose UI"}}},"pageContext":{"slug":"/android-compose-ui-lift-state-up/","previous":{"fields":{"slug":"/android-deeplink/"},"frontmatter":{"title":"android deeplink","tags":["writing","android","deeplink"]}},"next":{"fields":{"slug":"/observable-error-handling/"},"frontmatter":{"title":"Observable error handling","tags":["writing","rx"]}}}},"staticQueryHashes":["4111554205","63159454"]}